{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/ErrorModal/ErrorModal.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","query","status","startFilters","All","filterReducer","filter","todos","todosReducer","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","list","currentTodoId","id","dispatch","visibleData","useMemo","data","searchStatus","search","el","isActive","Active","isCompleted","Completed","completed","title","toLowerCase","includes","isListEmpty","length","className","map","classNames","onClick","setTodoActive","TodoFilter","onSubmit","event","preventDefault","value","onChange","selectedStatusValue","target","filterActions","queryValue","setQuery","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","ErrorModal","errorText","btnAction","TodoModal","useState","userInfo","setUserInfo","errorStatus","setErrorStatus","isLoader","setIsLoader","name","email","loadDataUser","currentUserId","a","useEffect","closeTodo","currentTodoActions","href","App","errorTitle","setErrorTitle","todosData","set","todosActions","loadData","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f8c77163.chunk.js","sourcesContent":["// export type Status = 'all' | 'active' | 'completed';\n\nexport enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n    case 'currentTodo/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: Status;\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype Filter = {\n  query: string;\n  status: Status;\n};\ntype Action = SetQueryAction | SetStatusAction;\n\nconst startFilters: Filter = { query: '', status: Status.All };\n\nconst filterReducer = (\n  filter: Filter = startFilters,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return { ...filter, query: action.payload };\n    case 'filter/SET_STATUS':\n      return { ...filter, status: action.payload };\n    default:\n      return filter;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[];\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Status } from '../../types/Status';\n\nexport const TodoList: React.FC = () => {\n  const list = useAppSelector(state => state.todos);\n  const currentTodoId = useAppSelector(state => state.currentTodo?.id);\n  const { query, status } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n  const setTodoActive = (todo: Todo) => dispatch(actions.setTodo(todo));\n\n  const filterData = (data: Todo[], search: string, searchStatus: Status) => {\n    if (search === '' && searchStatus === Status.All) {\n      return data;\n    }\n\n    return data.filter(el => {\n      const isActive = searchStatus === Status.Active;\n      const isCompleted = searchStatus === Status.Completed;\n\n      return (\n        searchStatus === Status.All\n        || (!el.completed && isActive)\n        || (el.completed && isCompleted)\n      ) && el.title.toLowerCase().includes(search.toLowerCase());\n    });\n  };\n\n  const visibleData = useMemo(\n    () => filterData(list, query, status),\n    [list, query, status],\n  );\n\n  const isListEmpty = useMemo(\n    () => !visibleData.length && !!list.length,\n    [list, query, status],\n  );\n\n  return (\n    <>\n      {isListEmpty && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      {!!visibleData.length && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleData.map((todo) => {\n              const {\n                id,\n                title,\n                completed,\n              } = todo;\n\n              return (\n                <tr\n                  data-cy=\"todo\"\n                  key={id}\n                  className={classNames({ 'has-background-info-light': currentTodoId === id })}\n                >\n                  <td className=\"is-vcentered\">{id}</td>\n                  <td className=\"is-vcentered\">\n                    {completed && <span className=\"icon\" data-cy=\"iconCompleted\"><i className=\"fas fa-check\" /></span>}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p className={completed ? 'has-text-success' : 'has-text-danger'}>{title}</p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => setTodoActive(todo)}\n                    >\n                      <span className=\"icon\">\n                        {\n                          currentTodoId !== id\n                            ? <i className=\"far fa-eye\" />\n                            : <i className=\"far fa-eye-slash\" />\n                        }\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const setStatus = (value: Status) => dispatch(filterActions.setStatus(value));\n  const setQuery = (queryValue: string) => (\n    dispatch(filterActions.setQuery(queryValue))\n  );\n  const clearQuery = () => dispatch(filterActions.setQuery(''));\n\n  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedStatusValue = event.target.value as Status;\n\n    if (status === selectedStatusValue) {\n      return;\n    }\n\n    setStatus(selectedStatusValue);\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const queryValue = event.target.value;\n\n    setQuery(queryValue);\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatusChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          value={query}\n          onChange={handleQueryChange}\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {!!query.length && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","type Props = {\n  errorText?: string;\n  btnAction: () => void;\n};\n\nexport const ErrorModal:React.FC<Props> = ({ errorText = '', btnAction }) => {\n  return (\n    <div className=\"notification is-danger\">\n      {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n      <button\n        type=\"button\"\n        className=\"delete\"\n        data-cy=\"modal-close\"\n        onClick={() => btnAction()}\n      />\n      <span className=\"modal-card-title fa-2x has-text-white\">\n        {`OOps! Something went wrong,\n          ${errorText}`}\n      </span>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { ErrorModal } from '../ErrorModal';\n\ntype Props = {\n  currentTodo: Todo;\n};\n\nexport const TodoModal: React.FC<Props> = ({ currentTodo }) => {\n  const [userInfo, setUserInfo] = useState<User | null>(null);\n  const [errorStatus, setErrorStatus] = useState('');\n  const [isLoader, setIsLoader] = useState(false);\n  const {\n    userId,\n    id,\n    title,\n    completed,\n  } = currentTodo;\n\n  const { name, email } = userInfo || {};\n\n  const loadDataUser = async (currentUserId: number) => {\n    try {\n      setIsLoader(true);\n      const data = await getUser(currentUserId);\n\n      setUserInfo(data);\n    } catch {\n      setErrorStatus(' please try again later');\n    } finally {\n      setIsLoader(false);\n    }\n  };\n\n  useEffect(() => {\n    loadDataUser(userId);\n  }, [userId]);\n\n  const dispatch = useDispatch();\n  const closeTodo = () => dispatch(currentTodoActions.removeTodo());\n\n  const closeError = () => {\n    setErrorStatus('');\n    closeTodo();\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoader && <Loader />}\n\n      {!!errorStatus.length && (\n        <ErrorModal btnAction={closeError} errorText={errorStatus} />\n      )}\n\n      {userInfo && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => closeTodo()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? (<strong className=\"has-text-success\">Done</strong>)\n                : (<strong className=\"has-text-danger\">Planned</strong>)}\n              {' by '}\n              <a href={`mailto:${email}`}>{name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { actions as todosActions } from './features/todos';\nimport { ErrorModal } from './components/ErrorModal';\n\nexport const App: React.FC = () => {\n  const [isLoader, setIsLoader] = useState(false);\n  const [errorTitle, setErrorTitle] = useState('');\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const todosData = useAppSelector(state => state.todos);\n  const dispatch = useAppDispatch();\n  const set = (data: Todo[]) => dispatch(todosActions.setTodos(data));\n\n  const loadData = async () => {\n    try {\n      setIsLoader(true);\n      const data = await getTodos();\n\n      set(data);\n    } catch {\n      setErrorTitle(' please try again later');\n    } finally {\n      setIsLoader(false);\n    }\n  };\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const closeModalError = () => {\n    setErrorTitle('');\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            {!!errorTitle.length && <ErrorModal btnAction={closeModalError} errorText={errorTitle} />}\n            {!!todosData.length && (\n              <>\n                <h1 className=\"title\">Todos:</h1>\n\n                <div className=\"block\">\n                  <TodoFilter />\n                </div>\n              </>\n            )}\n\n            <div className=\"block\">\n              {isLoader && <Loader />}\n              <TodoList />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal currentTodo={currentTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}