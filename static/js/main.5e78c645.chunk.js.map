{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","startFilters","filterReducer","filter","todos","todosReducer","rootReducer","combineReducers","currentTodo","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","list","useState","setTodos","currentTodoId","id","dispatch","isListEmpty","length","useEffect","data","search","searchStatus","el","completed","title","toLowerCase","includes","className","map","classNames","onClick","setTodoActive","TodoFilter","onSubmit","event","preventDefault","value","onChange","selectedStatusValue","target","filterActions","queryValue","setQuery","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","TodoModal","userInfo","setUserInfo","isLoader","setIsLoader","loadDataUser","currentUserId","a","window","console","log","currentTodoActions","href","email","name","App","set","todosActions","loadData","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e78c645.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n    case 'currentTodo/REMOVE':\n      return null;\n    case 'currentTodo/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: Status;\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype Filter = {\n  query: string;\n  status: Status;\n};\ntype Action = SetQueryAction | SetStatusAction;\n\nconst startFilters: Filter = { query: '', status: 'all' };\n\nconst filterReducer = (\n  filter: Filter = startFilters,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return { ...filter, query: action.payload };\n    case 'filter/SET_STATUS':\n      return { ...filter, status: action.payload };\n    default:\n      return filter;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[];\ntype Action = SetTodosAction;\n\n/*\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n*/\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Status } from '../../types/Status';\n\nexport const TodoList: React.FC = () => {\n  const list = useAppSelector(state => state.todos);\n  const [todos, setTodos] = useState(list);\n  const currentTodoId = useAppSelector(state => state.currentTodo?.id);\n  const { query, status } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n  const setTodoActive = (todo: Todo) => dispatch(actions.setTodo(todo));\n\n  const filterData = (data: Todo[], search: string, searchStatus: Status) => {\n    if (search === '' && searchStatus === 'all') {\n      return data;\n    }\n\n    return data.filter(el => {\n      switch (searchStatus) {\n        case 'active':\n          return !el.completed;\n        case 'completed':\n          return el.completed;\n        case 'all':\n        default:\n          return el;\n      }\n    }).filter(todo => (\n      todo.title.toLowerCase()\n        .includes(search.toLowerCase())\n    ));\n  };\n\n  const isListEmpty = !todos.length && !!list.length;\n\n  useEffect(() => {\n    setTodos(filterData(list, query, status));\n  }, [list, query, status]);\n\n  return (\n    <>\n      {isListEmpty && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      {!!todos.length && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {todos.map((todo) => {\n              const {\n                id,\n                title,\n                completed,\n              } = todo;\n\n              return (\n                <tr\n                  data-cy=\"todo\"\n                  key={id}\n                  className={classNames({ 'has-background-info-light': currentTodoId === id })}\n                >\n                  <td className=\"is-vcentered\">{id}</td>\n                  <td className=\"is-vcentered\">\n                    {completed && <span className=\"icon\" data-cy=\"iconCompleted\"><i className=\"fas fa-check\" /></span>}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p className={completed ? 'has-text-success' : 'has-text-danger'}>{title}</p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => setTodoActive(todo)}\n                    >\n                      <span className=\"icon\">\n                        {\n                          currentTodoId !== id\n                            ? <i className=\"far fa-eye\" />\n                            : <i className=\"far fa-eye-slash\" />\n                        }\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Status } from '../../types/Status';\nimport { actions as filterActions } from '../../features/filter';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const setStatus = (value: Status) => dispatch(filterActions.setStatus(value));\n  const setQuery = (queryValue: string) => (\n    dispatch(filterActions.setQuery(queryValue))\n  );\n  const clearQuery = () => dispatch(filterActions.setQuery(''));\n\n  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedStatusValue = event.target.value as Status;\n\n    if (status === selectedStatusValue) {\n      return;\n    }\n\n    setStatus(selectedStatusValue);\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const queryValue = event.target.value;\n\n    setQuery(queryValue);\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatusChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          value={query}\n          onChange={handleQueryChange}\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {!!query.length && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  currentTodo: Todo;\n};\n\nexport const TodoModal: React.FC<Props> = ({ currentTodo }) => {\n  const [userInfo, setUserInfo] = useState<User>();\n  const [isLoader, setIsLoader] = useState(false);\n  const {\n    userId,\n    id,\n    title,\n    completed,\n  } = currentTodo;\n\n  const loadDataUser = async (currentUserId: number) => {\n    try {\n      setIsLoader(true);\n      const data = await getUser(currentUserId);\n\n      setUserInfo(data);\n    } catch (error) {\n      window.console.log('error = ', error);\n    } finally {\n      setIsLoader(false);\n    }\n  };\n\n  useEffect(() => {\n    loadDataUser(userId);\n  }, []);\n\n  const dispatch = useDispatch();\n  const closeTodo = () => dispatch(currentTodoActions.removeTodo());\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoader && <Loader />}\n\n      {userInfo && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => closeTodo()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? (<strong className=\"has-text-success\">Done</strong>)\n                : (<strong className=\"has-text-danger\">Planned</strong>)}\n              {' by '}\n              <a href={`mailto:${userInfo.email}`}>{userInfo.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoader, setIsLoader] = useState(false);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n  const set = (data: Todo[]) => dispatch(todosActions.setTodos(data));\n\n  const loadData = async () => {\n    try {\n      setIsLoader(true);\n      const data = await getTodos();\n\n      set(data);\n    } catch (error) {\n      window.console.log('error = ', error);\n    } finally {\n      setIsLoader(false);\n    }\n  };\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            {!isLoader && (\n              <>\n                <h1 className=\"title\">Todos:</h1>\n\n                <div className=\"block\">\n                  <TodoFilter />\n                </div>\n              </>\n            )}\n\n            <div className=\"block\">\n              {isLoader && <Loader />}\n              <TodoList />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal currentTodo={currentTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}